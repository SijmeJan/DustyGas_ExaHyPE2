// This file was generated by the ExaHyPE toolkit.
// It will NOT be regenerated or overwritten.
// Please adapt it to your own needs.
//
// ========================
//   www.exahype.eu
// ========================

#include "DustyGasSolver.h"

#include "DustyGasSolver_Variables.h"

#include "kernels/KernelUtils.h"
#include "peano/utils/Loop.h"

tarch::logging::Log DustyGas::DustyGasSolver::_log( "DustyGas::DustyGasSolver" );


void DustyGas::DustyGasSolver::init(const std::vector<std::string>& cmdlineargs,const exahype::parser::ParserView& constants) {
  // Tip: You find documentation for this method in header file "DustyGas::DustyGasSolver.h".

  // @todo Please implement/augment if required


}

void DustyGas::DustyGasSolver::adjustPointSolution(const double* const x,const double t,const double dt,double* const Q) {
  // Tip: You find documentation for this method in header file "DustyGas::DustyGasSolver.h".
  // Tip: See header file "DustyGas::AbstractDustyGasSolver.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required
  if (tarch::la::equals(t,0.0)) {
    Variables vars(Q);
    const double GAMMA = 1.4;

    Q[0] =  std::exp(-((x[0] -0.5) *(x[0] -0.5) + (x[1] -0.5) *(x[1] -0.5)) /
                     (0.05 *0.05)) *1.0e-3;
    Q[1] = 0.0;
    Q[2] = 0.0;
    Q[3] = 0.0;
  }
}

void DustyGas::DustyGasSolver::boundaryValues(const double* const x,const double t,const double dt,const int faceIndex,const int direction,const double* const fluxIn,const double* const stateIn,const double* const gradStateIn,double* const fluxOut,double* const stateOut) {
  // Tip: You find documentation for this method in header file "DustyGas::DustyGasSolver.h".
  // Tip: See header file "DustyGas::AbstractDustyGasSolver.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required
  stateOut[0] = stateIn[0];
  stateOut[1] = stateIn[1];
  stateOut[2] = stateIn[2];
  stateOut[3] = stateIn[3];

  fluxOut[0] = fluxIn[0];
  fluxOut[1] = fluxIn[1];
  fluxOut[2] = fluxIn[2];
  fluxOut[3] = fluxIn[3];
}

exahype::solvers::Solver::RefinementControl DustyGas::DustyGasSolver::refinementCriterion(const double* const luh,const tarch::la::Vector<DIMENSIONS,double>& cellCentre,const tarch::la::Vector<DIMENSIONS,double>& cellSize,double t,const int level) {
  // Tip: You find documentation for this method in header file "DustyGas::DustyGasSolver.h".
  // Tip: See header file "DustyGas::AbstractDustyGasSolver.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.
  // Tip: See header file "peano/utils/Loop.h" for dimension-agnostic for loops.

  //  Example: Loop over all pointwise state variables (plus parameters)
  //
  //  constexpr int sizeOfQ = NumberOfVariables+NumberOfParameters;
  //  dfor(i,Order+1) {
  //    const int iLinearised = dLinearised(i,Order+1);
  //    const double* const Q = luh + iLinearised * sizeOfQ; // pointwise state variables (plus parameters)
  //    // use Q[0], Q[1], ... Q[sizeOfQ-1]
  //  }

  // @todo Please implement/augment if required
  return exahype::solvers::Solver::RefinementControl::Keep;
}

//*****************************************************************************
//******************************** PDE ****************************************
// To use other PDE terms, specify them in the specification file, delete this
// file and its header and rerun the toolkit
//*****************************************************************************


void DustyGas::DustyGasSolver::eigenvalues(const double* const Q,const int direction,double* const lambda) {
  // Tip: You find documentation for this method in header file "DustyGas::DustyGasSolver.h".
  // Tip: See header file "DustyGas::AbstractDustyGasSolver.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // Gas sound speed
  const double c = 1.0;

  double u_n = Q[direction + 1]/Q[0];

  // @todo Please implement/augment if required
  lambda[0] = u_n - c;
  lambda[1] = u_n;
  lambda[2] = u_n;
  lambda[3] = u_n + c;
}





void DustyGas::DustyGasSolver::flux(const double* const Q,double** const F) {
  // Tip: You find documentation for this method in header file "DustyGas::DustyGasSolver.h".
  // Tip: See header file "DustyGas::AbstractDustyGasSolver.h" for toolkit generated compile-time
  //      constants such as Order, NumberOfVariables, and NumberOfParameters.

  // @todo Please implement/augment if required

  // Gas sound speed
  const double c = 1.0;

  // Flux x
  F[0][0] = Q[1];
  F[0][1] = Q[1]*Q[1]/Q[0] + c*c*Q[0];
  F[0][2] = Q[1]*Q[2]/Q[0];
  F[0][3] = Q[1]*Q[3]/Q[0];

  F[1][0] = Q[2];
  F[1][1] = Q[2]*Q[1]/Q[0];
  F[1][2] = Q[2]*Q[2]/Q[0] + c*c*Q[0];
  F[1][3] = Q[2]*Q[3]/Q[0];
}
